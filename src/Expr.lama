-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}
public fun binop (op) {
    case op of
        "+" -> infix +
        | "-" -> infix -
        | "*" -> infix *
        | "/" -> infix /
        | "%" -> infix %
        | "<" -> infix <
        | ">" -> infix >
        | "<=" -> infix <=
        | "==" -> infix ==
        | ">=" -> infix >=
        | "!=" -> infix !=
        | "&&" -> infix &&
        | "!!" -> infix !!
    esac
}

fun eval (c@[s, w], expr) {
   case expr of
         Const (n) -> [c, n]
         | Var (x) -> [c, s.lookup(x)]
         | Ref (x) -> [c, x]
         | Binop (op, x, y) -> case eval (c, x) of
            [c1, v1] -> case eval (c1, y) of
                [c2, v2] -> [c2, binop (op) (v1, v2)]
                esac esac
        | Skip (x) -> [c, Void]
        | Assn (l, r) -> case evalList (c, {l, r}) of
                [[s, w], x:v:_] -> [[s <- [x, v], w], v]
                esac
        | Read (x) -> case readWorld(w) of
            [z, w] -> case eval(c, x) of
                [_, x] -> [[s <- [x, z], w], Void]
             esac esac
        | Write (e) -> case eval (c, e) of
            [[s, w], v] -> [[s, writeWorld(v, w)], Void] esac
        | Seq (s1, s2) -> case evalList (c, {s1, s2}) of
                [c, _:x:_] -> [c, x] esac
        | If (e, s1, s2) -> case eval (c, e) of
            [c, x] -> if x then eval (c, s1) else eval (c, s2) fi esac
        | While (e, s) -> case eval(c, e) of
            [c, x] -> if x then
                case eval (c, s) of [c, _] -> eval (c, While (e, s)) esac
                else [c, Void] fi esac
        | DoWhile (s, e) -> case evalList(c, {s, e}) of
                    [c, _:x:_] -> if x then eval (c, While (e, s)) else [c, Void] fi esac
        | Ignore (e) -> case eval (c, e) of [c, _] -> [c, Void] esac
        | Skip -> [c, Void]
        | Scope (defs, expr) -> case eval (foldl(initDef, [enterScope(s), w], defs), expr) of
                [[s, w], value] -> [[leaveScope(s), w], value]
            esac
        | Call (name, args) -> case s.lookup(name) of
            Fun (argNames, expr) -> case evalList (c, args) of
                [[s, w], args] -> case foldl(initArg, enterFunction(s), zip(argNames, args)) of
                    s -> case eval([s, w], expr) of
                        [[s, w], value] -> [[leaveFunction(c[0], getGlobal(s)), w], value]
                    esac esac esac esac
    esac
}

fun initArg(s, [name, value]) {
    addName(s, name, value)
}

fun zip(s1, s2) {
    case [s1, s2] of
         [{}, {}] -> {}
        | [v1:t1, v2: t2] -> [v1, v2] : zip(t1, t2)
    esac
}

fun initDef (c@[s, w], def) {
    case def of
        Var (names) -> [s.addNames(names), w]
        | Fun (name, args, body) -> [s.addFunction(name, args, body), w]
    esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
