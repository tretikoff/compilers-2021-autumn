-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (l, op, r) {
    Binop (op, l, r)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
    exp = memo $ eta expr ({
        [Left, {[s("!!"), binop]}],
        [Left, {[s("&&"), binop]}],
        [Left, {[s("==") | s("!=") | s("<") | s("<=") | s(">") | s(">="), binop]}],
        [Left, {[s("+") | s("-"), binop]}],
        [Left, {[s("*") | s("/") | s("%"), binop]}]
    }, primary);

var stmt = memo $ eta syntax (
    kRead variable = inbr[s("("), lident, s(")")] {Read (variable)} |
    kWrite expression = inbr[s("("), exp, s(")")] {Write (expression)} |
    variable = lident s[":="] expression = exp {Assn (variable, expression)} |
    seq1 = stmt s[";"] seq2 = stmt end {Seq (seq1, seq2)}
);


-- Public top-level parser
public parse = stmt;
