-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  case stmt of
      Assn(s, e) -> [c[0] <- [s, evalExpr(c[0], e)], c[1]]
      | Skip -> c
      | Seq (s1, s2) -> eval(eval(c, s1), s2)
      | Read (s) -> [c[0] <- [s, readWorld(c[1])[0]], readWorld(c[1])[1]]
      | Write (e) -> [c[0], writeWorld(evalExpr(c[0], e), c[1])]
      | If (e, s1, s2) -> if (evalExpr (c[0], e)) then eval (c, s1) else eval (c, s2) fi
      | While (e, s) -> case evalExpr (c[0], e) of
            eres -> if (eres) then
                        eval (eval (c, s), While (e, s))
                    else c
                    fi
                        esac
      | DoWhile (s, e) -> case eval (c, s) of
         c1 -> case evalExpr (c1[0], e) of
            eres -> if (eres) then
                        eval (c1, DoWhile (s, e))
                              else c1
                    fi
                          esac
               esac
    esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
