-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, state, world], insns) {
  case insns of
    READ:rest -> eval ([readWorld(world)[0]:stack, state, readWorld(world)[1]], rest)
    | WRITE:rest -> case stack of
        st:stackR -> eval ([stackR, state, writeWorld(st, world)], rest)
        esac
    | BINOP(s):rest -> case stack of
        fst:snd:stackR -> eval([binop(s) (snd, fst) : stackR, state, world], rest)
        esac
    | LD(x):rest -> eval ([state(x):stack, state, world], rest)
    | ST(x):rest -> case stack of
        fst:stackR -> eval ([stackR, state <- [x, fst], world], rest)
        esac
    | CONST(n):rest -> eval([n:stack, state, world], rest)
    | {} -> [stack, state, world]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (s) -> {LD (s)}
      | Const (i) -> {CONST(i)}
      | Binop (s, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ {BINOP(s)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Assn(s, e) -> compileExpr(e) +++ {ST(s)}
      | Skip -> {}
      | Seq (s1, s2) -> compileSM(s1) +++ compileSM(s2)
      | Read (s) -> READ:ST(s):{}
      | Write (e) -> compileExpr(e) +++ {WRITE}
  esac
}
