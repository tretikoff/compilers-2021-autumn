-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, [stack, state, world], insns) {
  case insns of
    READ:rest -> eval (env, [readWorld(world)[0]:stack, state, readWorld(world)[1]], rest)
    | WRITE:rest -> case stack of
        st:stackR -> eval (env, [stackR, state, writeWorld(st, world)], rest)
        esac
    | BINOP(s):rest -> case stack of
        fst:snd:stackR -> eval(env, [binop(s) (snd, fst) : stackR, state, world], rest)
        esac
    | LD(x):rest -> eval (env, [state(x):stack, state, world], rest)
    | LDA(x):rest -> eval (env, [Ref(x):stack, state, world], rest)
    | ST(x):rest -> case stack of
        fst:stackR -> eval (env, [stackR, state <- [x, fst], world], rest)
        esac
    | STI:rest -> case stack of
        v:(Ref (ref)):stackR -> eval (env, [v:stackR, state <- [ref, v], world], rest)
        esac
    | DROP:rest -> case stack of
        _:stackR -> eval (env, [stackR, state, world], rest) esac
    | DUP:rest -> case stack of
            x:stackR -> eval (env, [x:x:stackR, state, world], rest) esac
    | CONST(n):rest -> eval(env, [n:stack, state, world], rest)
    | LABEL(s):rest -> eval(env, [stack, state, world], rest)
    | JMP(label):rest -> eval(env, [stack, state, world], fromLabel(env, label))
    | CJMP(c, label):rest -> case stack of
        fl:stackR -> case c of
            "z" -> case fl of
                0 -> eval(env, [stackR, state, world], fromLabel(env, label))
                |_ -> eval(env, [stackR, state, world], rest)
            esac
            | "nz" -> case fl of
                0 -> eval(env, [stackR, state, world], rest)
                |_ -> eval(env, [stackR, state, world], fromLabel(env, label))
            esac
        esac
     esac
    | {} -> [stack, state, world]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}


-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.

-- LABEL (s)    -> sprintf ("LABEL %s", s)
-- JMP   (l)    -> sprintf ("JMP %s", l)
-- CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
public fun compileSM (stmt) {
  fun compile (env, stmt) {
      case stmt of
          Assn(x, e) -> case compile(env, x) of [env, xs] -> case compile (env, e) of [env, xe] -> [env, xs +++ xe +++ {STI}] esac esac
          | Var (s) -> [env, {LD (s)}]
          | Const (i) -> [env, {CONST(i)}]
          | Binop (s, e1, e2) -> case compile(env, e1) of
                [env, s1] -> case compile(env, e2) of
                    [env, s2] -> [env, s1 +++ s2 +++ {BINOP(s)}]
                    esac esac
          | Skip -> [env, {}]
          | Ref (x) -> [env, {LDA (x)}]
          | Seq (s1, s2) -> case compile(env, s1) of
               [env1, st1] -> case compile(env1, s2) of
                    [env2, st2] -> [env2, st1 +++ st2]
                    esac
               esac
          | Read (s) -> [env, {READ, ST(s)}]
          | Write (e) -> case compile(env, e) of
                [env, s] -> [env, s +++ {WRITE}] esac
          | If (e, s1, s2) -> case genLabels (env, 2) of
              [lfls, lend, env1] -> case compile(env1, e) of
                  [env2, es] -> case compile(env2, s1) of
                      [env3, stru] -> case compile(env3, s2) of
                           [env4, sfls] -> [env4, es +++ {CJMP ("z", lfls)} +++ stru +++ {JMP(lend), LABEL(lfls)} +++ sfls +++ {LABEL(lend)}]
                      esac esac esac esac
          | While (e, s) -> case genLabels (env, 2) of
                [le, ls, env] -> case compile(env, e) of
                    [env, ce] -> case compile(env, s) of
                        [env, cs] -> [env, {JMP(le), LABEL(ls)} +++ cs +++ {LABEL(le)} +++ ce +++ {CJMP("nz", ls)}]
                    esac esac esac
          | DoWhile (s, e) -> case genLabels (env, 2) of
                 [le, ls, env] -> case compile(env, s) of
                     [env, cs] -> case compile(env, e) of
                        [env, ce] -> [env, {LABEL(ls)} +++ cs +++ {LABEL(le)} +++ ce +++ {CJMP("nz", ls)}]
                     esac esac esac
          | Ignore (e) -> case compile (env, e) of
                [env2, cs] -> [env2, cs +++ {DROP}] esac
      esac
  }
  compile(initCompEnv (), stmt)[1]
}
